#1---------- DATA STORAGE ----------#

# Consider an invisible array that can be as long as necessary
# Each time you declare a variable (called a pointer), it has a datatype and one value, which is assigned to a corresponding array index:
int @0 = 100
char @5 = 'a'
float @3 = 2.58
int @4 = 3+2
# You could now imagine the array looking like this: [100, , , 2.58, , 'a', ...]
# Indexes can also be defined multiple pointers at a time, provided they have the same datatype
float @1,3,4 = 10.0, 12.34, 18-2.12
# Indexes can be accessed with an @ and a number or expression returning a valid pointer
@0                  #> 100
@(4+1)              #> 'a'
@@4                 #> @(@4) --> @5 --> 'a'
@'b'                #! Error
@index              #! Error


#2 Ranges # are always ints that can describe a range of indexes. They take up at least two consecutive spaces in the array,
# and will be changed by modifying either of those spaces in other ways. A range can be accessed with a $, not an @.
$1 = 3:8
int @1 = 5          # Changing index 1, which stores the value of the starting index of the range
_$1                 #> 5:8  # _ means to return the representation of whatever is after it, which in some cases is not the same as the value

# Ranges can be defined relatively
$1 = 2:+6           # 6 items long, starting at 2
$1 = -6:8           # 6 items long, ending at 8

# Ranges may be defined in reverse order, and will error if either of their numbers have been cleared or changed in the array.
$1 = 8:2
$1 = 2:-6

clear @2
char @2 = 'a'
$1                  #! Error ($1 takes up two indexes, @1 and @2, but @2 is no longer an int)

# Ranges can also be defined using pointers, and will dynamically re-evaluate if those indexes are changed
int @0 = 5
int @1 = 10
int @2 = 3
int @3 = -4
$4 = @0:@1          #> 5:10
$6 = -2:@2          #> -2:3 --> 1:3
$8 = @3:@1          #> -4:10 --> 6:10
@2 = 7
$6                  #> -2:7 --> 5:7

# If a range is defined in a way that overwrites its own definition, it will error:
int @5 = 7
$4 = 5:@5           #! Error ($4 takes up @4 and @5)

# Ranges can have multiple index ranges or standalone indexes, but they will take up more space
$0 = 1:3, 10, 12:15 # This range includes the indexes 1, 2, 10, 12, 13, 14, and the array looks like this: [1, 3, 10, 12, 15, ...]


# The array can be accessed with square brackets, and can have range syntax inside or a range pointer
char @0,1,2,3,4 = 'a', 'p', 'p', 'l', 'e'
[0,2:5]             #> 'a', 'p', 'l', 'e'
$5 = 0:2,4
[$5]                #> 'a', 'p' 'l'

# A double quoted string is the same as doing each letter as a char:
char @0 = "apple"   #> char @0,1,2,3,4 = 'a', 'p', 'p', 'l', 'e'


#1 ---------- CONTROL FLOW ---------- #

# Basic control flow is done with the `goto` keyword, which will start execution at a line number
goto 3
return "this line will never print" to out
return "this is the only thing printed" to out

# Markers can be used to avoid hardcoding line numbers
goto *start
return "this line will never print" to out
*start
return "this is the only thing printed" to out


# Conditions can be done with `if` and `goto`
if 1 == @0 goto 4
return "there is not a 1 an index 0" to out
goto -1
return "there is a 1 at index 0" to out


# Loops can be done in a similar way
int @0 = 0

*loopStart
@0 += 1
return @0 to out
if @0 > 5 goto *loopStart

return "Reached 5!" to out


# Functions with return values require the `goget` keyword
goto *start

*func
# This function adds 1 to the item @0
return @0 + 1 to call

*start
return "Enter a number: " to out
int @0 = goget input as int

return to out "\nAdd one? "
if goget input as char == 'y' goto *addOne

return "\nYour number is unchanged" to out
goto -1     # ends the program

*addOne
return "\nYour number is now: " to out
return goget *func to out


#1 ---------- ERRORS ---------- #-

MalformedTokenError: Token is formed wrong
- Char with multiple characters
- String with a newline
- @ or $ without a number
- Int ends in decimal point, has multiple decimal points, 
IncompleteSequenceError: Sequence is not finished
- `Return to` without a final keyword (like `call`, `out`, `file <filename>`)
TypeError: Incorrect type
- 

-#